name: NPM Publish

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - "package.json"

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          registry-url: "https://registry.npmjs.org/"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Check and update version if needed
        id: version-check
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Check if version exists on npm
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://registry.npmjs.org/firestore-helper-ts/$CURRENT_VERSION)

          if [ "$HTTP_STATUS" == "200" ]; then
            echo "Version $CURRENT_VERSION already exists on npm. Incrementing patch version..."
            
            # Split version into components
            IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
            MAJOR="${VERSION_PARTS[0]}"
            MINOR="${VERSION_PARTS[1]}"
            PATCH="${VERSION_PARTS[2]}"
            
            # Increment patch version
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
            
            echo "New version: $NEW_VERSION"
            
            # Update package.json with new version
            npm version $NEW_VERSION --no-git-tag-version
            
            # Set outputs for later steps
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "version_changed=true" >> $GITHUB_OUTPUT
          else
            echo "Version $CURRENT_VERSION does not exist on npm. Continuing with this version."
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit version change if needed
        if: steps.version-check.outputs.version_changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json package-lock.json
          git commit -m "Bump version to ${{ steps.version-check.outputs.version }}"
          git push

      - name: Build
        run: npm run build

      - name: Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create Git tag and GitHub Release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const version = "${{ steps.version-check.outputs.version }}";
            const tagName = `v${version}`;

            // Create tag if it doesn't exist
            try {
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${tagName}`,
                sha: context.sha
              });
              console.log(`Tag ${tagName} created successfully`);
            } catch (error) {
              if (error.status === 422) {
                console.log(`Tag ${tagName} already exists. Skipping tag creation.`);
              } else {
                throw error;
              }
            }

            // Create GitHub Release
            try {
              const response = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tagName,
                name: `Release ${tagName}`,
                body: `Release of version ${version}`,
                draft: false,
                prerelease: false
              });
              console.log(`Release created: ${response.data.html_url}`);
            } catch (error) {
              console.error('Failed to create release:', error);
              throw error;
            }
